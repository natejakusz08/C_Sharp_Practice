using System;

namespace MagicalInheritance
{
  class Program
  {
    static void Main(string[] args)
    {
      //Storm s = new Storm("wind", true, "Joe");
      //Console.WriteLine(s.Announce());

      Pupil joe = new Pupil("Joe");
      Storm wStorm = joe.CastWindStorm();
      Console.WriteLine(wStorm.Announce());

      Mage meg = new Mage("Megan");
      Storm rStorm = meg.CastRainStorm();
      Console.WriteLine(rStorm.Announce());

      Archmage nate = new Archmage("Nate");
      Storm SWStorm = nate.CastRainStorm();
      Console.WriteLine(SWStorm.Announce());
      Storm SLStorm = nate.CastLightningStorm();
      Console.WriteLine(SLStorm.Announce());
    }   
  }
  
    class Storm
  {
    public string Essence
    { get; private set;}
    public bool IsStrong
    { get; private set;}
    public string Caster
    { get; private set;}

    public Storm(string essence, bool isStrong, string caster)
    {
      Essence = essence;
      IsStrong = isStrong;
      Caster = caster;
    }
    public string Announce()
      {
        if (IsStrong)
        {
          return $"{Caster} cast a strong {Essence} storm!";
        }
        else
        {
          return $"{Caster} cast a weak {Essence} storm!";
        }
      }
  }
  
    class Pupil
  {
    public string Title
    {get; private set;}

    public Pupil(string title)
    {
      Title = title;
    }

    public Storm CastWindStorm()
    {
      return new Storm("wind", false, Title);
    }
  }
  
    class Mage : Pupil
  {
    public Mage(string title) : base(title)
    {}
    public virtual Storm CastRainStorm()
    {
      return new Storm("Rain", false, Title);
    }
    
  }
  
   class Archmage : Mage
 {
   public Archmage(string title) : base(title)
   {}
   public override Storm CastRainStorm()
   {
    return new Storm("rain", true, Title);
   }
   public Storm CastLightningStorm()
   {
     return new Storm("Lightning", true, Title);
   }
 }
}
